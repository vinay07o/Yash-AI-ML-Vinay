resources:
  containers:
  - container: mlops
    image: mcr.microsoft.com/mlops/python:latest

pr: none
trigger:
  branches:
    include:
    - main
  paths:
    include:
    - insurance_classification/
    - ml_service/


variables:
- template: insurance_classification-variables-template.yml
- group: devopsforai-aml-vg

pool:
  vmImage: ubuntu-latest
  name: Azure Pipelines

stages:
- stage: 'Model_CI'
  displayName: 'Model CI'
  jobs:
  - job: "Model_CI_Pipeline"
    displayName: "Model CI Pipeline"
    container: mlops
    timeoutInMinutes: 0
    steps:
    - bash: 'pip install --user -r ./.pipelines/requirements.txt'
      displayName: 'Installing Dependencies'
    
    - bash: '/home/vsts_azpcontainer/.local/bin/black ./ml_service/ --config ./black.toml'
    - bash: '/home/vsts_azpcontainer/.local/bin/isort ./ml_service/ --settings-file ./setup.cfg'
      displayName: 'Running black & isort for Auto formatting for service codes'

    - bash: '/home/vsts_azpcontainer/.local/bin/black ./insurance_classification/ --config ./black.toml' 
    - bash: '/home/vsts_azpcontainer/.local/bin/isort ./insurance_classification/ --settings-file ./setup.cfg'
      displayName: 'Running black & isort for Auto formatting for supporting function'

    - template: code-quality-template.yml
    - task: AzureCLI@1
      inputs:
        azureSubscription: '$(WORKSPACE_SVC_CONNECTION)'
        scriptLocation: inlineScript
        workingDirectory: $(Build.SourcesDirectory)
        inlineScript: |
          set -e # fail on error
          export SUBSCRIPTION_ID=$(az account show --query id -o tsv)
          # Invoke the Python building and publishing a training pipeline
          python -m ml_service.pipelines.insurance_classification_build_train_pipeline
      displayName: 'Publish Azure Machine Learning Pipeline'

- stage: 'Trigger_AML_Pipeline'
  displayName: 'Train and evaluate model'
  condition: succeeded()
  variables:
    BUILD_URI: '$(SYSTEM.COLLECTIONURI)$(SYSTEM.TEAMPROJECT)/_build/results?buildId=$(BUILD.BUILDID)'
  jobs:
  - job: "Get_Pipeline_ID"
    condition: and(succeeded(), eq(coalesce(variables['auto-trigger-training'], 'true'), 'true'))
    displayName: "Get Pipeline ID for execution"
    container: mlops
    timeoutInMinutes: 0
    steps:
    - task: AzureCLI@1
      inputs:
        azureSubscription: '$(WORKSPACE_SVC_CONNECTION)'
        scriptLocation: inlineScript
        workingDirectory: $(Build.SourcesDirectory)
        inlineScript: |
          set -e # fail on error
          export SUBSCRIPTION_ID=$(az account show --query id -o tsv)
          python -m ml_service.pipelines.run_train_pipeline --output_pipeline_id_file "pipeline_id.txt" --skip_train_execution
          # Set AMLPIPELINEID variable for next AML Pipeline task in next job
          AMLPIPELINEID="$(cat pipeline_id.txt)"
          echo "##vso[task.setvariable variable=AMLPIPELINEID;isOutput=true]$AMLPIPELINEID"
      name: 'getpipelineid'
      displayName: 'Get Pipeline ID'
  - job: "Run_ML_Pipeline"
    dependsOn: "Get_Pipeline_ID"
    displayName: "Trigger ML Training Pipeline"
    timeoutInMinutes: 0
    pool: server
    variables:
      AMLPIPELINE_ID: $[ dependencies.Get_Pipeline_ID.outputs['getpipelineid.AMLPIPELINEID'] ]
    steps:
    - task: ms-air-aiagility.vss-services-azureml.azureml-restApi-task.MLPublishedPipelineRestAPITask@0
      displayName: 'Invoke ML pipeline'
      inputs:
        azureSubscription: '$(WORKSPACE_SVC_CONNECTION)'
        PipelineId: '$(AMLPIPELINE_ID)'
        ExperimentName: '$(EXPERIMENT_NAME)'
        PipelineParameters: '"ParameterAssignments": {"model_name": "$(MODEL_NAME)"}, "tags": {"BuildId": "$(Build.BuildId)", "BuildUri": "$(BUILD_URI)"}, "StepTags": {"BuildId": "$(Build.BuildId)", "BuildUri": "$(BUILD_URI)"}'
    
  - job: "publishing_artifact"
    steps:
    - task: AzureCLI@2
      displayName: 'Add ml extension'
      inputs:
        azureSubscription: '$(WORKSPACE_SVC_CONNECTION)'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: 'az extension add -n azure-cli-ml'

    - task: AzureCLI@2
      displayName: 'Downloading the model'
      inputs:
        azureSubscription: '$(WORKSPACE_SVC_CONNECTION)'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: 'az ml model download -g $(RESOURCE_GROUP) -w $(WORKSPACE_NAME) -i $(jq -r .modelId metadata/model.json) -t ./models --overwrite'


    - task: CopyFiles@2
      displayName: 'Copy Files to: $(Build.ArtifactStagingDirectory)'
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)'
        Contents: |
         **/metadata/*
         **/models/*
         **/.pipelines/*
        TargetFolder: '$(Build.ArtifactStagingDirectory)'


    - task: PublishPipelineArtifact@1
      displayName: 'Publish Pipeline Artifact'
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)'
        artifact: Landing
